"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"URLShortenerController",{enumerable:true,get:function(){return URLShortenerController}});const _types=require("../types");const _BaseController=require("./BaseController");const _URLShortenerQueries=require("../utils/queries/URLShortenerQueries");const _crypto=require("crypto");const _uaparserjs=require("ua-parser-js");const _RedisClient=require("../services/RedisClient");function _define_property(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}class URLShortenerController extends _BaseController.BaseController{async createShortURL(req,res){try{const user=req.user;const urlBody=new _types.URLBody(req.body);if(!urlBody.topic){urlBody.topic="NA"}if(!urlBody.custom_alias){urlBody.custom_alias=this.generateBase62Alias()}else if(urlBody.custom_alias.length!==6){return res.status(400).json({message:"Alias length should be 6."})}const checkExistingAlias=await this.urlShortenerQueries.execCheckExistingAlias(urlBody.custom_alias);if(checkExistingAlias.length>0){return res.status(400).json({message:"Alias already exists"})}const urlResponse=new _types.URLResponse;const checkExistingLongUrl=await this.urlShortenerQueries.execCheckExistingUrl(urlBody.long_url);if(checkExistingLongUrl.length>0){const values=this.getValues(checkExistingLongUrl);urlResponse.url_id=parseInt(values[0]);urlResponse.long_url=values[1];urlResponse.short_url=process.env.SHORT_URL_PREFIX+values[2];return res.status(200).json(urlResponse)}const result=await this.urlShortenerQueries.execInsertShortURL(user.user_id,urlBody);const values=this.getValues(result);urlResponse.url_id=parseInt(values[0]);urlResponse.long_url=values[1];urlResponse.short_url=process.env.SHORT_URL_PREFIX+values[2];return res.status(201).json(urlResponse)}catch(error){console.error("Error creating short URL:",error);return res.status(500).json({message:"Internal Server Error"})}}async redirectToLongURL(req,res){try{const{alias}=req.params;if(!alias||alias.length!==6){return res.status(400).json({message:"Alias must be 6 characters long"})}const cachedLongUrlObject=await _RedisClient.redisClient.getValue(alias);let longUrl;let urlId;if(cachedLongUrlObject){const cachedObject=JSON.parse(cachedLongUrlObject);urlId=cachedObject.id;longUrl=cachedObject.long_url}else{const fetchLongURL=await this.urlShortenerQueries.execGetLongURL(alias);if(!fetchLongURL.length){return res.status(404).json({message:"Alias does not exist"})}const urlValues=this.getValues(fetchLongURL);urlId=urlValues[0];longUrl=urlValues[1];await _RedisClient.redisClient.setKey(alias,urlId,longUrl)}let ip=req.ip;const ua=req.headers["user-agent"];const parser=new _uaparserjs.UAParser(ua);const{device,os}=parser.getResult();const urlLog=new _types.URLLog;if(ip.startsWith("::ffff:")){ip=ip.substring(7)}urlLog.url_id=parseInt(urlId);var _device_type;urlLog.requester_device=(_device_type=device.type)!==null&&_device_type!==void 0?_device_type:"desktop";urlLog.requester_ip=ip;var _os_name;urlLog.requester_os=(_os_name=os.name)!==null&&_os_name!==void 0?_os_name:"unknown";await this.urlShortenerQueries.execEnterFetchLog(urlLog);return res.status(301).json({url_id:urlId,long_url:longUrl})}catch(error){console.error("Error redirecting to long URL:",error);return res.status(500).json({message:"Internal Server Error"})}}generateBase62Alias(){const characters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";const randomBuffer=(0,_crypto.randomBytes)(3);let randomNumber=randomBuffer.readUIntBE(0,3);let result="";while(randomNumber>0){const remainder=randomNumber%62;result=characters.charAt(remainder)+result;randomNumber=Math.floor(randomNumber/62)}return result.padStart(6,"0").slice(0,6)}constructor(){super();_define_property(this,"urlShortenerQueries",void 0);this.urlShortenerQueries=new _URLShortenerQueries.URLShortenerQueries}}